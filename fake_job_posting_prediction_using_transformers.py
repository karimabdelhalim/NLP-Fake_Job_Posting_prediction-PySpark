# -*- coding: utf-8 -*-
"""fake-job-posting-prediction-using-transformers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14V3YFilBFsUf4wLy-27RzifVLPYL3AZU
"""

import pandas as pd
job=pd.read_csv('../input/real-or-fake-fake-jobposting-prediction/fake_job_postings.csv')
job.head()

job=job[['description','fraudulent']]
job.head()

job.shape

job.info()

job.isnull().sum()

job=job.dropna()
job.shape

job['fraudulent'].unique()

job['fraudulent'].value_counts()

X=list(job['description'])
X[:5]

y=list(job['fraudulent'])
y[:5]

round(job['fraudulent'].value_counts()*100/len(job),2)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 42,stratify=y)
X_train[:5]

!pip install transformers

from transformers import DistilBertTokenizerFast
tokenizer = DistilBertTokenizerFast.from_pretrained('distilbert-base-uncased')

import torch
from transformers import BertTokenizer, BertForSequenceClassification
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
import pandas as pd



train_encodings = tokenizer(X_train, truncation=True, padding=True)
test_encodings = tokenizer(X_test, truncation=True, padding=True)



y_train[:5]

import tensorflow as tf

train_dataset = tf.data.Dataset.from_tensor_slices((
    dict(train_encodings),
    y_train
))

test_dataset = tf.data.Dataset.from_tensor_slices((
    dict(test_encodings),
    y_test
))

from transformers import TFDistilBertForSequenceClassification, TFTrainer, TFTrainingArguments

training_args = TFTrainingArguments(
    output_dir='./results',          # output directory
    num_train_epochs=2,              # total number of training epochs
    per_device_train_batch_size=16,  # batch size per device during training
    per_device_eval_batch_size=16,   # batch size for evaluation
    warmup_steps=500,                # number of warmup steps for learning rate scheduler
    weight_decay=0.1,               # strength of weight decay
    logging_steps=100,

)

with training_args.strategy.scope():
    trainer_model = TFDistilBertForSequenceClassification.from_pretrained("distilbert-base-uncased", num_labels=2)

trainer = TFTrainer(
    model=trainer_model,                 # the instantiated ðŸ¤— Transformers model to be trained
    args=training_args,                  # training arguments, defined above
    train_dataset=train_dataset,         # training dataset
    eval_dataset=test_dataset,             # evaluation dataset
)


trainer.train()

trainer.evaluate(test_dataset)

trainer.predict(test_dataset)

from sklearn.metrics import classification_report
target_names = ['Real','Fake']
print(classification_report(y_test,
                            trainer.predict(test_dataset)[1],target_names=target_names
                           )
     )

